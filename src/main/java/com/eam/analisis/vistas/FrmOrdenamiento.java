package com.eam.analisis.vistas;

import com.eam.analisis.controlador.Main;
import com.eam.analisis.controlador.TablasPivoteadas;
import com.eam.analisis.controlador.metodosOrdenacion.MetodosOrdenacion;
import com.eam.analisis.controlador.metodosOrdenacion.MetodosOrdenacionCadena;
import com.eam.analisis.controlador.metodosOrdenacion.MetodosOrdenacionFecha;
import com.eam.analisis.controlador.reportes.CtlReportes;
import com.eam.analisis.modelo.Cancion;
import com.eam.analisis.modelo.EstadisticaOrdenacion;
import java.math.BigInteger;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Yo
 */
public class FrmOrdenamiento extends javax.swing.JFrame {

    MetodosOrdenacion metodosEnteros;
    MetodosOrdenacionCadena metodosCadena;
    MetodosOrdenacionFecha metodosFechas;

    public FrmOrdenamiento() {
        initComponents();
        metodosCadena = new MetodosOrdenacionCadena();
        metodosEnteros = new MetodosOrdenacion();
        metodosFechas = new MetodosOrdenacionFecha();
        this.listarOrdenacion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        cbTipoDatos = new javax.swing.JComboBox<>();
        cbTipoOrdenacion = new javax.swing.JComboBox<>();
        cbCantidaD = new javax.swing.JComboBox<>();
        btnCalcular = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOrdenacion = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstOrdenados = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        cbFiltroCantidad = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable3);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cbTipoDatos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione un tipo de dato", "cadena", "Entero", "Fecha" }));
        cbTipoDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTipoDatosActionPerformed(evt);
            }
        });

        cbTipoOrdenacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "seleccione una opción", "inserción", "burbuja", "burbuja bidireccional", "gnome", "mezcla", "seleccion", "peine", "shell", "monticulos", "rapido" }));
        cbTipoOrdenacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTipoOrdenacionActionPerformed(evt);
            }
        });

        cbCantidaD.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "seleccione una opción", "100", "1000", "10000", "100000", "500000", "1000000" }));

        btnCalcular.setText("Calcular");
        btnCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED)));

        jLabel2.setText("En la tabla solo se tienen en cuenta el promedio de cada operacion ralizada, dentro de una estructura");

        jLabel3.setText("de datos.");

        jLabel4.setForeground(new java.awt.Color(255, 0, 0));
        jLabel4.setText("NOTA:");

        tblOrdenacion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblOrdenacion);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2))
                .addGap(0, 0, 0)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED)));

        jScrollPane1.setViewportView(lstOrdenados);

        jLabel1.setText("Lista de ordenados");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                .addContainerGap())
        );

        cbFiltroCantidad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione el filtro de cantidad", "100", "1000", "10000", "100000", "500000", "1000000" }));
        cbFiltroCantidad.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbFiltroCantidadItemStateChanged(evt);
            }
        });

        jButton1.setText("Atras");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Actualizar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Graficar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbFiltroCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnCalcular, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbTipoDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cbTipoOrdenacion, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(85, 85, 85)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cbCantidaD, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbTipoDatos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbTipoOrdenacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbCantidaD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCalcular)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbFiltroCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbTipoDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTipoDatosActionPerformed

    }//GEN-LAST:event_cbTipoDatosActionPerformed

    private void cbTipoOrdenacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTipoOrdenacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbTipoOrdenacionActionPerformed

    private void btnCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularActionPerformed
        if (cbCantidaD.getSelectedIndex() == 0) {
            JOptionPane.showInternalMessageDialog(null, "Seleccione una cantida");
            return;
        }
        if ((cbTipoDatos.getSelectedItem() + "").equals("cadena")) {
            ArrayList<Cancion> lista;
            long time = 0;
            switch (cbTipoDatos.getSelectedIndex()) {
                case 0:
                    JOptionPane.showMessageDialog(null, "Seleccione una estructura");
                    break;
                case 1:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosCadena.ordenarInsercion(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                    break;
                case 2:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosCadena.ordenarBurbuja(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                    break;
                case 3:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosCadena.ordenarBurbujaBidireccional(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                    break;
                case 4:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosCadena.ordenarGnome(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                    break;
                case 5:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosCadena.ordenarMezcla(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                    break;
                case 6:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosCadena.ordenarSeleccion(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                case 7:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosCadena.ordenarPeine(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                case 8:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosCadena.ordenarShell(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                    break;
                case 9:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosCadena.ordenarMonticulo(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                    break;
                case 10:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosCadena.ordenarRapido(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                    break;
            }
        } else if ((cbTipoDatos.getSelectedItem() + "").equals("Entero")) {
            ArrayList<Cancion> lista;
            long time = 0;
            switch (cbTipoDatos.getSelectedIndex()) {
                case 0:
                    JOptionPane.showMessageDialog(null, "Seleccione una estructura");
                    break;
                case 1:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosEnteros.ordenarInsercion(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                    break;
                case 2:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosEnteros.ordenarBurbuja(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                    break;
                case 3:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosEnteros.ordenarBurbujaBidireccional(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                    break;
                case 4:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosEnteros.ordenarGnome(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                    break;
                case 5:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosEnteros.ordenarMezcla(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                    break;
                case 6:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosEnteros.ordenarSeleccion(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                case 7:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosEnteros.ordenarPeine(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                case 8:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosEnteros.ordenarShell(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                    break;
                case 9:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosEnteros.ordenarMonticulo(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                    break;
                case 10:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosEnteros.ordenarRapido(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                    break;
            }
        } else if ((cbTipoDatos.getSelectedItem() + "").equals("Fecha")) {
            ArrayList<Cancion> lista;
            long time = 0;
            switch (cbTipoDatos.getSelectedIndex()) {
                case 0:
                    JOptionPane.showMessageDialog(null, "Seleccione una estructura");
                    break;
                case 1:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosFechas.OrdenamientoInsercion(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                    break;
                case 2:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosFechas.ordenarBurbuja(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                    break;
                case 3:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosFechas.ordenarBurbujaBidireccional(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                    break;
                case 4:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosFechas.ordenarGnome(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                    break;
                case 5:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosFechas.ordenarMezcla(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                    break;
                case 6:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosFechas.OrdenamientoSeleccion(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                case 7:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosFechas.OrdenamientoPeine(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                case 8:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosFechas.ordenarShell(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                    break;
                case 9:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosFechas.ordenarMonticulo(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                    break;
                case 10:
                    lista = trearArreglo(Integer.parseInt(cbCantidaD.getSelectedItem() + ""));
                    time = System.nanoTime();
                    metodosFechas.ordenarRapido(lista);
                    time = System.nanoTime() - time;
                    Main.dao.guardar(new EstadisticaOrdenacion(cbTipoDatos.getSelectedItem() + "", cbTipoOrdenacion.getSelectedItem() + "", new BigInteger(cbCantidaD.getSelectedItem() + ""), new BigInteger(time + "")));
                    llenarLista(lista);
                    break;
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione una opcion");
        }
        this.listarOrdenacion();
    }//GEN-LAST:event_btnCalcularActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        DefaultListModel modelo = new DefaultListModel();
        modelo.clear();
        lstOrdenados.setModel(modelo);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
        Main.iniciarVentanaPrincipal();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cbFiltroCantidadItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbFiltroCantidadItemStateChanged
        listarOrdenacion();
    }//GEN-LAST:event_cbFiltroCantidadItemStateChanged

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            CtlReportes.graficarOrdenamientos(Integer.parseInt(JOptionPane.showInputDialog("Ingrese la cantidad de canciones por las que desea filtrar")));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No se ha ingresado bien la cantidad");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    public ArrayList<Cancion> trearArreglo(int valor) {
        return new ArrayList(Main.dao.cargarConsulta("SELECT * FROM CANCION WHERE ROWNUM <= " + valor, Cancion.class));
    }

    public void llenarLista(ArrayList<Cancion> lista) {
        DefaultListModel modelo = new DefaultListModel();
        for (Cancion cancion : lista) {
            modelo.addElement(cancion.toString());
        }
        lstOrdenados.setModel(modelo);
        cbCantidaD.setSelectedIndex(0);
        cbTipoDatos.setSelectedIndex(0);
        cbTipoOrdenacion.setSelectedIndex(0);

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalcular;
    private javax.swing.JComboBox<String> cbCantidaD;
    private javax.swing.JComboBox<String> cbFiltroCantidad;
    private javax.swing.JComboBox<String> cbTipoDatos;
    private javax.swing.JComboBox<String> cbTipoOrdenacion;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable3;
    private javax.swing.JList<String> lstOrdenados;
    private javax.swing.JTable tblOrdenacion;
    // End of variables declaration//GEN-END:variables

    private void listarOrdenacion() {
        if (cbFiltroCantidad.getSelectedIndex() != 0) {
            tblOrdenacion.setModel(TablasPivoteadas.listarMetodosOrdenacion(Integer.parseInt(cbFiltroCantidad.getSelectedItem().toString())));
        } else {
            tblOrdenacion.setModel(new DefaultTableModel());
        }
    }
}
